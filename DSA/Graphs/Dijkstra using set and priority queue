//Adj is adjlist V is number of vertices and S is the starting point

//Dijkstra using Priority queue

    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        
        priority_queue<pair<int,int> , vector<pair<int,int>>, greater<pair<int,int>>> pq;
        vector<int> dis(V);
        for(int i=0;i<V;i++){
            dis[i]=1e9;
        }
        dis[S]=0;
        pq.push({0,S});
        while(!pq.empty()){
            
            int dist=pq.top().first;
            int node=pq.top().second;
            pq.pop();
            
            for(auto v:adj[node]){
                int weight=v[1];
                int adjNode=v[0];
                if(dist + weight< dis[adjNode]){
                    dis[adjNode]=dist+weight;
                    pq.push({dis[adjNode],adjNode});
                }
            }
        }
        return dis;
    }
//Dijkstra using set
vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        set<pair<int,int>> pq;
        vector<int> dis(V);
        for(int i=0;i<V;i++){
            dis[i]=1e9;
        }
        dis[S]=0;
        pq.insert({0,S});
        while(!pq.empty()){
            auto it=*(pq.begin());
            int dist=it.first;
            int node=it.second;
            pq.erase(it);
            
            for(auto v:adj[node]){
                int weight=v[1];
                int adjNode=v[0];
                if(dist + weight< dis[adjNode]){
                    if(dis[adjNode]!=1e9)
                        pq.erase({dis[adjNode],adjNode});
                    dis[adjNode]=dist+weight;
                    pq.insert({dis[adjNode],adjNode});
                }
            }
        }
        return dis;
    }
